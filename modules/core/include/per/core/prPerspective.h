//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : prPerspective.h
//  @ Date : 16/01/2017
//  @ Author :
//
//


#if !defined(_PRPERSPECTIVE_H)
#define _PRPERSPECTIVE_H

#include <per/prCameraModel.h>

/*!
 \class prPerspective prPerspective.h <per/prPerspective.h>
 \brief Class for dealing with the projection functions of a classical pinhole camera.
 */
class prPerspective : public prCameraModel
{
public:
    /*!
     * \fn prPerspective(double au=0,double av=0,double u0=0,double v0=0, double k1=0,double k2=0,double k3=0,double k4=0,double k5=0)
     * \brief Contructor of the prPerspective camera model initializing intrinsic parameters
     * \param au the horizontal scale factor from the normalized image plane to the digital image (\alpha_u)
     * \param av the vertical scale factor from the normalized image plane to the digital image (\alpha_v)
     * \param u0 the horizontal coordinate of the principal point (u_0)
     * \param v0 the vertical coordinate of the principal point (v_0)
     * \param k1 the second order radial distorsion parameter (k_1)
     * \param k2 the fourth order radial distorsion parameter (k_2)
     * \param k3 the sixth order radial distorsion parameter (k_3)
     * \param k4 the first tangential distorsion parameter (k_4)
     * \param k5 the second tangential distorsion parameter (k_5)
     */
    prPerspective(double au=0,double av=0,double u0=0,double v0=0, double k1=0,double k2=0,double k3=0,double k4=0,double k5=0);
    
    /*!
     * \fn ~prPerspective()
     * \brief Destructor of a prPerspective object
     */
    ~prPerspective();
    

    /*!
     * \fn void project3DImage(prPointFeature & P)
     * \brief Project a 3D point expressed in the camera frame to the normalized image plane following the classical pinhole camera model
     * \param P the point to project
     * \return Nothing
     */
    void project3DImage(prPointFeature & P);
    
    /*!
     * \fn std::ostream& operator << (std::ostream & os)
     * \brief << operator overload for writing the prPerspective sensor model parameters to a stream
     *
     * \param os the stream in which to write
     * \return the updated stream.
     */
    std::ostream& operator << (std::ostream & os);
};

#endif  //_PRPERSPECTIVE_H
